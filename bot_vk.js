const VK = require('node-vk-bot-api');
const Markup = require('node-vk-bot-api/lib/markup');
const Session = require('node-vk-bot-api/lib/session');
const Stage = require('node-vk-bot-api/lib/stage');
const Scene = require('node-vk-bot-api/lib/scene');
const session = new Session();
const session2 = new Session();

const os = require("os");
const { promptMessage } = require("./functions.js");
const randomPuppy = require("random-puppy");
const botconfig = require('./JSON/botconfig.json');
const math = require('mathjs');
const strftime = require('strftime')
const bot = new VK(process.env.TOKENVK);


module.exports = {
	start() {
	bot.command('–°—Ç–∞—Ä—Ç', (ctx) => {
try{
  ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –±–æ—Ç Highflash —Ç–µ–ø–µ—Ä—å –∏ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –Ω–µ–º–Ω–æ–≥–æ —Å—ã—Ä–æ–π, –ø–æ—ç—Ç–æ–º—É –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –∫–æ–¥–∞ —Å Discord.js.\n\n–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–ª–∞–≤–∏—à –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã.\n–í–µ—Ä—Å–∏—è ' + botconfig.vkversion + ' –æ—Ç ' + botconfig.vkdate + '.', null, Markup
    .keyboard([
    [
      Markup.button('–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞', 'primary'),
      Markup.button('–ú–µ–º—ã Reddit'),
	  ],
	  [
	    Markup.button('–ú–∏—Ä —Ñ–æ—Ç–æ–∫ Reddit'),
	    Markup.button('–ò–≥—Ä–∞ "–®–∞—Ä —Å—É–¥—å–±—ã"'),
	  ],
	  [
	    Markup.button('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'),
		  Markup.button('–ï—â–µ'),
	  ],
    ]).inline()
	);
} catch(ex) {  console.error(ex);}
});

	bot.command('–ù–∞—á–∞—Ç—å', (ctx) => {
try{
  ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –±–æ—Ç Highflash —Ç–µ–ø–µ—Ä—å –∏ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –Ω–µ–º–Ω–æ–≥–æ —Å—ã—Ä–æ–π, –ø–æ—ç—Ç–æ–º—É –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –∫–æ–¥–∞ —Å Discord.js.\n\n–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–ª–∞–≤–∏—à –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã.\n–í–µ—Ä—Å–∏—è ' + botconfig.vkversion + ' –æ—Ç ' + botconfig.vkdate + '. –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 2.', null, Markup
    .keyboard([
    [
      Markup.button('–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞', 'primary'),
      Markup.button('–ú–µ–º—ã Reddit'),
	  ],
	  [
	    Markup.button('–ú–∏—Ä —Ñ–æ—Ç–æ–∫ Reddit'),
	    Markup.button('–ò–≥—Ä–∞ "–®–∞—Ä —Å—É–¥—å–±—ã"'),
	  ],
	  [
	    Markup.button('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'),
		  Markup.button('–ï—â–µ'),
	  ],
    ]).inline()
	);
} catch(ex) {  console.error(ex);}
});

	bot.command('–ï—â–µ', (ctx) => {
try{
  ctx.reply('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–ª–∞–≤–∏—à –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã. –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 –∏–∑ 2.', null, Markup
    .keyboard([
      [
        Markup.button('–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'),
        Markup.button('–û –±–µ—Å–µ–¥–µ'),
	  ],
    ]).inline()
	);
} catch(ex) {  console.error(ex);}
});

	bot.command('[club197493648|@highflash] –ï—â–µ', (ctx) => {
try{
  ctx.reply('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–ª–∞–≤–∏—à –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã. –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 –∏–∑ 2.', null, Markup
    .keyboard([
    [
        Markup.button('–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'),
        Markup.button('–û –±–µ—Å–µ–¥–µ'),
	  ],
    ]).inline()
	);
} catch(ex) {  console.error(ex);}
});

	bot.command('–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', (ctx) => {
try{
  let online_friends = "";
  let platform_client = "";
  let isClosed = "";

    var ru_RU = {
        days: ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'],
        shortDays: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],
        months: ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'],
        shortMonths: ['—è–Ω–≤.', '—Ñ–µ–≤.', '–º–∞—Ä.', '–∞–ø—Ä.', '–º–∞—è', '–∏—é–Ω.', '–∏—é–ª.', '–∞–≤–≥.', '—Å–µ–Ω.', '–æ–∫—Ç.', '–Ω–æ—è.', '–¥–µ–∫.'],
        AM: '–î–ü',
        PM: '–ü–ü',
        am: '–¥–ø',
        pm: '–ø–ø',
            formats: {
                c: '%a %d %b %Y %X',
                D: '%d.%m.%y',
                F: '%Y-%m-%d',
                R: '%H:%M',
                r: '%I:%M:%S %p',
                T: '%H:%M:%S',
                v: '%e-%b-%Y',
                X: '%T',
                x: '%D'
            }
    }
    var strftimeRU = strftime.localize(ru_RU)

  const response = bot.execute('users.get', {user_ids: ctx.message.from_id, fields: 'online, nickname, city, last_seen, screen_name, bdate, counters', name_case: "gen"}).then(rns => {console.log(rns)
  if(rns[0].last_seen.platform < 6) {
      platform_client = " üì±"
  } else {
      platform_client = " üñ•Ô∏è"
  };
  if(rns[0].counters.online_friends === 0) {
    online_friends = ""
  } else {
    online_friends = " (" + rns[0].counters.online_friends + " –æ–Ω–ª–∞–π–Ω)"
  };
  if(rns[0].is_closed === true) {
    isClosed = "–î–∞" 
  } else { isClosed = "–ù–µ—Ç" }
    ctx.reply('–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ' + rns[0].first_name + ' ' + rns[0].last_name + '\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ' + (rns[0].bdate || '(–°–∫—Ä—ã—Ç–æ)') + '\n–ê–¥—Ä–µ—Å –ø—Ä–æ—Ñ–∏–ª—è: ' + rns[0].screen_name + "\n–î—Ä—É–∑–µ–π: " + rns[0].counters.friends + online_friends + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: " + (strftimeRU("%d %B %Y –≥. –≤ %H:%M –ú–°–ö", new Date((rns[0].last_seen.time * 1000) + 10800000)
    ) || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + platform_client + "\n–ó–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å: " + isClosed);
    });
} catch(ex) {  console.error(ex);}
});


	bot.command('[club197493648|@highflash] –û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', (ctx) => {
try{
  let online_friends = "";
  let platform_client = "";
  let isClosed = "";

    var ru_RU = {
        days: ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'],
        shortDays: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'],
        months: ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'],
        shortMonths: ['—è–Ω–≤.', '—Ñ–µ–≤.', '–º–∞—Ä.', '–∞–ø—Ä.', '–º–∞—è', '–∏—é–Ω.', '–∏—é–ª.', '–∞–≤–≥.', '—Å–µ–Ω.', '–æ–∫—Ç.', '–Ω–æ—è.', '–¥–µ–∫.'],
        AM: '–î–ü',
        PM: '–ü–ü',
        am: '–¥–ø',
        pm: '–ø–ø',
            formats: {
                c: '%a %d %b %Y %X',
                D: '%d.%m.%y',
                F: '%Y-%m-%d',
                R: '%H:%M',
                r: '%I:%M:%S %p',
                T: '%H:%M:%S',
                v: '%e-%b-%Y',
                X: '%T',
                x: '%D'
            }
    }
    var strftimeRU = strftime.localize(ru_RU)

  const response = bot.execute('users.get', {user_ids: ctx.message.from_id, fields: 'online, nickname, city, last_seen, screen_name, bdate, counters', name_case: "gen"}).then(rns => {console.log(rns)
  if(rns[0].last_seen.platform < 6) {
      platform_client = " üì±"
  } else {
      platform_client = " üñ•Ô∏è"
  };
  if(rns[0].counters.online_friends === 0) {
    online_friends = ""
  } else {
    online_friends = " (" + rns[0].counters.online_friends + " –æ–Ω–ª–∞–π–Ω)"
  };
  if(rns[0].is_closed === true) {
    isClosed = "–î–∞" 
  } else { isClosed = "–ù–µ—Ç" }

    ctx.reply('–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ' + rns[0].first_name + ' ' + rns[0].last_name + '\n\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ' + (rns[0].bdate || '(–°–∫—Ä—ã—Ç–æ)') + '\n–ê–¥—Ä–µ—Å –ø—Ä–æ—Ñ–∏–ª—è: ' + rns[0].screen_name + "\n–î—Ä—É–∑–µ–π: " + rns[0].counters.friends + online_friends + "\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: " + (strftimeRU("%d %B %Y –≥. –≤ %H:%M –ú–°–ö", new Date((rns[0].last_seen.time * 1000) + 10800000)
    ) || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + platform_client + "\n–ó–∞–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å: " + isClosed);
    });
} catch(ex) {  console.error(ex);}
});

bot.command('–û –±–µ—Å–µ–¥–µ', (ctx) => {
try {
  let conv_name = "";
  let owner_id = "";
  let firstmsg = "";

  const firstMsgRns = bot.execute('messages.getByConversationMessageId', {peer_id: ctx.message.peer_id, conversation_message_ids: 1, fields: "name", group_id: 197493648}).then(fmsg => {
    console.log(fmsg.items)
    firstmsg = strftime("%D.%m.%Y –≤ %H:%M –ú–°–ö", new Date((fmsg.items[0].date * 1000) + 10800000));
  });  

  const response = bot.execute('messages.getConversationsById', {peer_ids: ctx.message.peer_id, extended: 1, fields: "name", group_id: 197493648}).then(rns => {
    try {
          console.log(rns.items[0].chat_settings);
  const responce2 = bot.execute('users.get', {user_ids: rns.items[0].chat_settings.owner_id, fields: 'online, nickname, city, last_seen, screen_name, bdate, counters', name_case: "nom"}).then(rns2 => {
    if(!rns.items[0].chat_settings.title) {
      conv_name = " "
    } else {
      conv_name = " \"" + rns.items[0].chat_settings.title + "\""
    }
    ctx.reply('–û –±–µ—Å–µ–¥–µ' + conv_name + '\n\n–í–ª–∞–¥–µ–ª–µ—Ü: ' + (rns2[0].first_name + " " + rns2[0].last_name || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + '\n–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ' + rns.items[0].chat_settings.members_count + " (" + rns.items[0].chat_settings.active_ids.length + " –æ–Ω–ª–∞–π–Ω)\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: " + rns.items[0].chat_settings.admin_ids.length)
  });
  } catch(ex) {
    if(ex.message === "Cannot read property 'chat_settings' of undefined") {
        ctx.reply("–°–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Ä–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ—Å–µ–¥—ã.")
    } else if(ex.message === "Cannot read property 'owner_id' of undefined") {
        ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        } else {
        ctx.reply("–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: " + ex.message)
    }
  }
});
  } catch(ex) {
        ctx.reply("–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: " + ex.message)
  }
  let i = 0
process.on('warning', (warning) => {
        if(i < 1) {
            const response = bot.execute('messages.getConversationsById', {peer_ids: ctx.message.peer_id, extended: 1, fields: "name", group_id: 197493648}).then(rns => {
    if(!rns.items[0].chat_settings.title) {
      conv_name = " "
    } else {
      conv_name = " \"" + rns.items[0].chat_settings.title + "\""
    }
    ctx.reply('–û –±–µ—Å–µ–¥–µ' + conv_name + '\n\n–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ' + rns.items[0].chat_settings.members_count + " (" + rns.items[0].chat_settings.active_ids.length + " –æ–Ω–ª–∞–π–Ω)\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: " + rns.items[0].chat_settings.admin_ids.length);
            });
          i = i + 1
        }
})
});

bot.command('[club197493648|@highflash] –û –±–µ—Å–µ–¥–µ', (ctx) => {
try {
  let conv_name = "";
  let owner_id = "";
  let firstmsg = "";

  const firstMsgRns = bot.execute('messages.getByConversationMessageId', {peer_id: ctx.message.peer_id, conversation_message_ids: 1, fields: "name", group_id: 197493648}).then(fmsg => {
    console.log(fmsg.items)
    firstmsg = strftime("%D.%m.%Y –≤ %H:%M –ú–°–ö", new Date((fmsg.items[0].date * 1000) + 10800000));
  });  

  const response = bot.execute('messages.getConversationsById', {peer_ids: ctx.message.peer_id, extended: 1, fields: "name", group_id: 197493648}).then(rns => {
    try {
          console.log(rns.items[0].chat_settings);
  const responce2 = bot.execute('users.get', {user_ids: rns.items[0].chat_settings.owner_id, fields: 'online, nickname, city, last_seen, screen_name, bdate, counters', name_case: "nom"}).then(rns2 => {
    if(!rns.items[0].chat_settings.title) {
      conv_name = " "
    } else {
      conv_name = " \"" + rns.items[0].chat_settings.title + "\""
    }
    ctx.reply('–û –±–µ—Å–µ–¥–µ' + conv_name + '\n\n–í–ª–∞–¥–µ–ª–µ—Ü: ' + (rns2[0].first_name + " " + rns2[0].last_name || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") + '\n–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ' + rns.items[0].chat_settings.members_count + " (" + rns.items[0].chat_settings.active_ids.length + " –æ–Ω–ª–∞–π–Ω)\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: " + rns.items[0].chat_settings.admin_ids.length)
  });
  } catch(ex) {
    if(ex.message === "Cannot read property 'chat_settings' of undefined") {
        ctx.reply("–°–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ—Ä–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ—Å–µ–¥—ã.")
    } else if(ex.message === "Cannot read property 'owner_id' of undefined") {
        ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        } else {
        ctx.reply("–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: " + ex.message)
    }
  }
});
  } catch(ex) {
        ctx.reply("–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ö–æ–¥ –æ—à–∏–±–∫–∏: " + ex.message)
  }
  let i = 0
process.on('warning', (warning) => {
        if(i < 1) {
            const response = bot.execute('messages.getConversationsById', {peer_ids: ctx.message.peer_id, extended: 1, fields: "name", group_id: 197493648}).then(rns => {
    if(!rns.items[0].chat_settings.title) {
      conv_name = " "
    } else {
      conv_name = " \"" + rns.items[0].chat_settings.title + "\""
    }
    ctx.reply('–û –±–µ—Å–µ–¥–µ' + conv_name + '\n\n–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ' + rns.items[0].chat_settings.members_count + " (" + rns.items[0].chat_settings.active_ids.length + " –æ–Ω–ª–∞–π–Ω)\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: " + rns.items[0].chat_settings.admin_ids.length);
            });
          i = i + 1
        }
})
});

bot.command('–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞', (ctx) => {
    const plaform = os.platform();
    if (os.platform() === "win32") {
      platform = "Windows (" + os.release() + ")";
    } else {
      if (os.platform() === "android") {
        platform =
          "Android —Å Termux (" +
          os.release() +
          ")";
      } else {
        if (os.platform() === "linux") {
          platform = "Linux (" + os.release() + ")";
        }
      }
    }
  ctx.reply(`üíª –°–≤–µ–¥–µ–Ω–∏—è –æ —Ö–æ—Å—Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω –±–æ—Ç\n\n–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} –ú–ë (${Math.round(process.memoryUsage().heapUsed / 1024)} –∫–ë)\n–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${os.cpus()[0].model}\n–ê–ø—Ç–∞–π–º: ${Math.floor((process.uptime() * 1000) / 86400000) + strftime(":%H:%M:%S", new Date(process.uptime() * 1000))}\n\n–ë–æ—Ç Highflash –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Node.js –≤–µ—Ä—Å–∏–∏ ${process.version} –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç node-vk-bot-api`);
});

bot.command('[club197493648|@highflash] –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞', (ctx) => {
    const plaform = os.platform();
    if (os.platform() === "win32") {
      platform = "Windows (" + os.release() + ")";
    } else {
      if (os.platform() === "android") {
        platform =
          "Android —Å Termux (" +
          os.release() +
          ")";
      } else {
        if (os.platform() === "linux") {
          platform = "Linux (" + os.release() + ")";
        }
      }
    }
  ctx.reply(`üíª –°–≤–µ–¥–µ–Ω–∏—è –æ —Ö–æ—Å—Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω –±–æ—Ç\n\n–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} –ú–ë (${Math.round(process.memoryUsage().heapUsed / 1024)} –∫–ë)\n–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}\n–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: ${os.cpus()[0].model}\n\n–ë–æ—Ç Highflash –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Node.js –≤–µ—Ä—Å–∏–∏ ${process.version} –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç node-vk-bot-api`);
});

bot.command('–ú–µ–º—ã Reddit', (ctx) => {
	const subReddits = ["dankmeme", "meme", "me_irl"];
    const random = subReddits[Math.floor(Math.random() * subReddits.length)];

    const imgaddr = async function(a, b) {
      await randomPuppy(random).then(url => {
		ctx.reply(`–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ` + url + `\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: r/${random}`);
      });
    };
    imgaddr();
});

bot.command('[club197493648|@highflash] –ú–µ–º—ã Reddit', (ctx) => {
	const subReddits = ["dankmeme", "meme", "me_irl"];
    const random = subReddits[Math.floor(Math.random() * subReddits.length)];

    const imgaddr = async function(a, b) {
      await randomPuppy(random).then(url => {
		ctx.reply(`–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ` + url + `\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: r/${random}`);
      });
    };
    imgaddr();
});

bot.command('–ú–∏—Ä —Ñ–æ—Ç–æ–∫ Reddit', async (ctx) => { //–∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã "–ú–∏—Ä —Ñ–æ—Ç–æ–∫ –≤ Reddit"
    const subReddits = ["pic", "analog"];
    const random = subReddits[Math.floor(Math.random() * subReddits.length)];
    const imgaddr = async function(a, b) {
      await randomPuppy(random).then(url => {
	    const vkccjson = {};
		const vkccreq = bot.execute(`utils.getShortLink`, {url: url, private: 1}).then(response => {
			JSON.parse
		});
			ctx.reply(`–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ` + url + `\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: r/${random}`);
      });
    };
    imgaddr();
});

bot.command('[club197493648|@highflash] –ú–∏—Ä —Ñ–æ—Ç–æ–∫ Reddit', async (ctx) => { //–∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã "–ú–∏—Ä —Ñ–æ—Ç–æ–∫ –≤ Reddit"
    const subReddits = ["pic", "analog"];
    const random = subReddits[Math.floor(Math.random() * subReddits.length)];
    const imgaddr = async function(a, b) {
      await randomPuppy(random).then(url => {
	    const vkccjson = {};
const response = bot.execute('users.get', {
  user_ids: 1,
}).then(rns => {console.log(rns)});
			ctx.reply(`–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ` + url + `\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: r/${random}`);
      });
    };
    imgaddr();
});

const scene = new Scene('8ball',
  (ctx) => {
    ctx.scene.next();
    ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞—Ç–µ–º –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç.');
  },
  (ctx) => {
    ctx.session.content = ctx.message.text;
      let answers = [
        "–î–∞.",
        "–ù–µ—Ç.",
        "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.",
        "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ.",
        "–°–æ–≥–ª–∞—Å–µ–Ω.",
        "–í–æ–∑–º–æ–∂–Ω–æ.",
        "–ö–æ–Ω–µ—á–Ω–æ.",
		"–Ø –Ω–µ –∑–Ω–∞—é.",
        "–û—Ç—Ä–∏—Ü–∞—é.",
		"–ö–æ–Ω–µ—á–Ω–æ, –Ω–µ—Ç.",
        "–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å",
        "–ü–æ—Ö–æ–∂–µ, –í—ã –∑–∞–¥–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
        "C–æ–º–Ω–µ–≤–∞—é—Å—å.",
        "–≠—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ.",
        "–ù–µ –∑–Ω–∞—é –∫–∞–∫ –≤—ã, –Ω–æ —Å—á–∏—Ç–∞—é, —á—Ç–æ –Ω–µ—Ç.",
      ]; //–º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤
      let rand = Math.floor(Math.random() * answers.length);
    ctx.scene.leave();
    ctx.reply(`${answers[rand]}`);
  });

const calcSc = new Scene('calc',
  (ctx) => {
    ctx.scene.next();
    ctx.reply('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.');
  },
  (ctx) => {
    ctx.session.content = ctx.message.text;
	console.log('ctx.message.body content: ' + ctx.message.text); //–≤ –∫–æ–Ω—Å–æ–ª—å
  try{
    let result = math.evaluate(ctx.session.content).toString();
    ctx.scene.leave();
    ctx.reply(`–û—Ç–≤–µ—Ç: ${result}.`);
    } catch(ex) {
      ctx.scene.leave();
      ctx.reply(`–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.`);}
	}
);

const reverseSc = new Scene('reverse',
  (ctx) => {
    ctx.scene.next();
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.');
  },
  (ctx) => {
    ctx.session.content = ctx.message.text;
        var msg_array = ctx.session.content;

        var msg_string = ctx.session.content;
        var reverse_string = "";
        var word;
        var split_word;
        for (var i = msg_string.length - 1; i >= 0; i -= 1) {

            reverse_string += msg_string[i];
        }
    ctx.scene.leave();
    ctx.reply(`${reverse_string}`);
	    function getRandomNumber(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }
	}
);  

const stage = new Stage(scene, calcSc, reverseSc);

bot.use(session.middleware());
bot.use(stage.middleware());
  
bot.command('–ò–≥—Ä–∞ "–®–∞—Ä —Å—É–¥—å–±—ã"', (ctx) => {
  ctx.scene.enter('8ball');
  
});


bot.command('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', (ctx) => {
  console.log(bot + "\n\n\n");
  console.log(bot.api + "\n\n\n");
  ctx.scene.enter('calc');
});

bot.command('[club197493648|@highflash] –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', (ctx) => {
  console.log(bot + "\n\n\n");
  console.log(bot.api + "\n\n\n");
  ctx.scene.enter('calc');
});

bot.command('–†–µ–≤–µ—Ä—Å', (ctx) => {
  ctx.scene.enter('reverse');
});


bot.command('[club197493648|@highflash] –†–µ–≤–µ—Ä—Å', (ctx) => {
  ctx.scene.enter('reverse');
});

bot.command('[club197493648|@highflash] –ò–≥—Ä–∞ "–®–∞—Ä —Å—É–¥—å–±—ã"', (ctx) => {
  ctx.scene.enter('8ball');
});

bot.startPolling((err) => {
    console.log('Tinelix Highflash bot (VK) started!\n\n');
  if (err) {
    console.log(err);
  }
});
}
}